apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.fullnameOverride | default (printf "%s-song" .Release.Name) }}
  labels:
    app.kubernetes.io/name: {{ .Values.nameOverride | default "song" }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate  # Ensures only one pod at a time to avoid resource exhaustion
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.nameOverride | default "song" }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.nameOverride | default "song" }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: song
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            # Force auth configuration via JVM system properties (highest precedence)
            - name: JAVA_OPTS
              value: "-Dauth.server.provider={{ .Values.song.auth.server.provider }} -Dauth.server.clientID={{ .Values.song.auth.server.clientId }} -Dauth.server.keycloak.realm={{ .Values.song.auth.server.keycloak.realm }} -Dauth.server.keycloak.host={{ .Values.song.auth.server.keycloak.host }} -Dauth.server.scope.study.prefix={{ .Values.song.auth.server.scope.study.prefix }} -Dauth.server.introspectionUri={{ .Values.song.auth.oauth2.introspectionUri }}"
            # Spring Run Profiles
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.song.spring.profiles.active | quote }}
            # Flyway variables
            - name: SPRING_FLYWAY_ENABLED
              value: {{ .Values.song.spring.flyway.enabled | quote }}
            # Song Variables
            - name: ID_USELOCAL
              value: {{ .Values.song.id.useLocal | quote }}
            - name: SCHEMAS_ENFORCELATEST
              value: {{ .Values.song.schemas.enforceLatest | quote }}
            # Score Variables
            - name: SCORE_URL
              value: {{ .Values.song.score.url | quote }}
            - name: SCORE_ACCESSTOKEN
              value: {{ .Values.song.score.accessToken | quote }}
            # Keycloak Variables
            - name: AUTH_SERVER_PROVIDER
              value: {{ .Values.song.auth.server.provider | quote }}
            - name: AUTH_SERVER_CLIENTID
              value: {{ .Values.song.auth.server.clientId | quote }}
            - name: AUTH_SERVER_CLIENT_ID
              value: {{ .Values.song.auth.server.clientId | quote }}
            - name: AUTH_SERVER_KEYCLOAK_HOST
              value: {{ .Values.song.auth.server.keycloak.host | quote }}
            - name: AUTH_SERVER_KEYCLOAK_REALM
              value: {{ .Values.song.auth.server.keycloak.realm | quote }}
            # Alternative naming patterns for stubborn properties
            - name: AUTH_SERVER_CLIENTSECRET
              value: {{ .Values.song.auth.server.clientSecret | quote }}
            - name: AUTH_SERVER_CLIENT_SECRET
              value: {{ .Values.song.auth.server.clientSecret | quote }}
            - name: AUTH_SERVER_SCOPE_STUDY_PREFIX
              value: {{ .Values.song.auth.server.scope.study.prefix | quote }}
            - name: AUTH_SERVER_SCOPE_STUDY_SUFFIX
              value: {{ .Values.song.auth.server.scope.study.suffix | quote }}
            - name: AUTH_SERVER_SCOPE_SYSTEM
              value: {{ .Values.song.auth.server.scope.system | quote }}
            # Environment variables using exact Spring Boot property naming
            - name: AUTH_SERVER_PROVIDER
              value: {{ .Values.song.auth.server.provider | quote }}
            - name: AUTH_SERVER_CLIENTID
              value: {{ .Values.song.auth.server.clientId | quote }}
            - name: AUTH_SERVER_KEYCLOAK_HOST
              value: {{ .Values.song.auth.server.keycloak.host | quote }}
            - name: AUTH_SERVER_KEYCLOAK_REALM
              value: {{ .Values.song.auth.server.keycloak.realm | quote }}
            - name: AUTH_SERVER_SCOPE_STUDY_PREFIX
              value: {{ .Values.song.auth.server.scope.study.prefix | quote }}
            - name: AUTH_SERVER_INTROSPECTIONURI
              value: {{ .Values.song.auth.oauth2.introspectionUri | quote }}
            # OAuth2 JWT configuration
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI
              value: {{ .Values.song.auth.oauth2.resourceserver.jwt.jwkSetUri | quote }}
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI
              value: {{ .Values.song.auth.oauth2.resourceserver.jwt.issuerUri | quote }}
            - name: SPRING_APPLICATION_JSON
              value: '{"auth":{"server":{"provider":"{{ .Values.song.auth.server.provider }}","clientID":"{{ .Values.song.auth.server.clientId }}","clientSecret":"{{ .Values.song.auth.server.clientSecret }}","tokenName":"{{ .Values.song.auth.server.tokenName }}","keycloak":{"host":"{{ .Values.song.auth.server.keycloak.host }}","realm":"{{ .Values.song.auth.server.keycloak.realm }}"},"scope":{"study":{"prefix":"{{ .Values.song.auth.server.scope.study.prefix }}","suffix":"{{ .Values.song.auth.server.scope.study.suffix }}"},"system":"{{ .Values.song.auth.server.scope.system }}"},"introspectionUri":"{{ .Values.song.auth.oauth2.introspectionUri }}"}},"spring":{"security":{"oauth2":{"resourceserver":{"jwt":{"jwk-set-uri":"{{ .Values.song.auth.oauth2.resourceserver.jwt.jwkSetUri }}","issuer-uri":"{{ .Values.song.auth.oauth2.resourceserver.jwt.issuerUri }}"}}}},"basic":{"enabled":false}},"logging":{"level":{"bio.overture.song.server.security":"DEBUG","org.springframework.security":"DEBUG"}}}'
            - name: AUTH_SERVER_INTROSPECTIONURI
              value: {{ .Values.song.auth.oauth2.introspectionUri | quote }}
            # Postgres Variables
            - name: SPRING_DATASOURCE_URL
              value: {{ .Values.song.datasource.url | quote }}
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.song.datasource.username | quote }}
            - name: SPRING_DATASOURCE_PASSWORD
              value: {{ .Values.song.datasource.password | quote }}
            # Kafka Variables
            - name: SPRING_KAFKA_BOOTSTRAPSERVERS
              value: {{ .Values.song.kafka.bootstrapServers | quote }}
            - name: SPRING_KAFKA_TEMPLATE_DEFAULTTOPIC
              value: {{ .Values.song.kafka.template.defaultTopic | quote }}
            # Swagger Variable
            - name: SWAGGER_ALTERNATEURL
              value: {{ .Values.song.swagger.alternateUrl | quote }}
            # Spring config location to load our override
            - name: SPRING_CONFIG_ADDITIONAL_LOCATION
              value: "file:/song-server/config/"
          volumeMounts:
            - name: song-config
              mountPath: /song-server/config
              readOnly: true
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            {{- if .Values.probes.liveness.httpGet }}
            httpGet:
              path: {{ .Values.probes.liveness.httpGet.path }}
              port: {{ .Values.probes.liveness.httpGet.port }}
            {{- else if .Values.probes.liveness.tcpSocket }}
            tcpSocket:
              port: {{ .Values.probes.liveness.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            {{- if .Values.probes.readiness.httpGet }}
            httpGet:
              path: {{ .Values.probes.readiness.httpGet.path }}
              port: {{ .Values.probes.readiness.httpGet.port }}
            {{- else if .Values.probes.readiness.tcpSocket }}
            tcpSocket:
              port: {{ .Values.probes.readiness.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: song-config
          configMap:
            name: {{ .Values.fullnameOverride | default (printf "%s-song" .Release.Name) }}-config
            items:
              - key: application-override.yml
                path: application-override.yml
              - key: application-zzz-final-override.yml
                path: application-zzz-final-override.yml
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
