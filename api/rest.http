# AGARI Overture Stack - Essential Workflow

# Test file info
@test_file_name = test_data.fasta
@test_file_size = 298
@test_file_md5 = cc70b8e811b39c98a938edf87145e34d

# Fixed IDs for Keycloak permissions
@study_id = study1
@analysis_id = analysis001

# Authentication config
@username = admin
@password = pass123
@realm = agari
@client_id = dms
@client_secret = dms-secret

### 1. LOGIN to get access token
# @name login
POST http://keycloak.local/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

username={{username}}
&password={{password}}
&grant_type=password
&client_id={{client_id}}
&client_secret={{client_secret}}

###
@token = {{login.response.body.access_token}}

### 2. CREATE STUDY
POST http://song.local/studies/{{study_id}}/
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "studyId": "{{study_id}}",
  "name": "AGARI Test Study", 
  "description": "Test study for genomic data workflow",
  "organization": "NICD",
  "info": {
    "projectType": "genomics",
    "region": "South Africa"
  }
}

### 3a. SUBMIT ANALYSIS
# @name submitAnalysis
POST http://song.local/submit/{{study_id}}/
Authorization: Bearer {{token}}
Content-Type: application/json

< ./data/analysis_submission.json

### 3b. GET ANALYSIS DETAILS
# Extract analysis_id from step 4 response and get full analysis details
@submitted_analysis_id = {{submitAnalysis.response.body.analysisId}}
# @name getAnalysis
GET http://song.local/studies/{{study_id}}/analysis/{{submitted_analysis_id}}
Authorization: Bearer {{token}}

### 4a. INITIALIZE SCORE UPLOAD
# Extract object_id from step 5 response
@object_id = {{getAnalysis.response.body.files[0].objectId}}
# @name initUpload
POST http://score.local/upload/{{object_id}}/uploads
Authorization: Bearer {{token}}
Content-Type: application/x-www-form-urlencoded

fileSize={{test_file_size}}
&md5={{test_file_md5}}
&overwrite=true

###
@upload_id = {{initUpload.response.body.uploadId}}
@presigned_url = {{initUpload.response.body.parts.0.url}}

@md5 = {{initUpload.response.body.objectMd5}}

### 4b. UPLOAD FILE TO MINIO
# Using hosts file entry: 127.0.0.1 minio (with port-forward to MinIO)
# @name uploadFile
PUT {{presigned_url}}
Content-Type: text/plain

< ./data/{{test_file_name}}

###
# @etag = {{uploadFile.response.headers.ETag}}
@etag = a1421b18d7859ad811877b981fedca4f
# Debug variables before step 8a
@debug_object_id = {{object_id}}
@debug_etag = {{etag}}
# @etag_stripped = {{etag.replace('"', '')}}
@debug_md5 = {{md5}}
@debug_upload_id = {{upload_id}}

### 4c. Finalise Part Upload
# @name finalizePartUpload
POST http://score.local/upload/{{object_id}}/parts?partNumber=1&etag={{etag}}&md5={{md5}}&uploadId={{upload_id}}
Authorization: Bearer {{token}}
Content-Type: application/json

### 4d. Finalize upload
# @name finalizeUpload
POST http://score.local/upload/{{object_id}}?uploadId={{upload_id}}
Authorization: Bearer {{token}}
Content-Type: application/json

# @analysis_id = 359047cd-7a55-462f-9047-cd7a55b62fdd
@analysis_id = {{submitAnalysis.response.body.analysisId}}

### 5. PUBLISH ANALYSIS 
PUT http://song.local/studies/{{study_id}}/analysis/publish/{{analysis_id}}
Authorization: Bearer {{token}}

### 6. TRIGGER MAESTRO INDEXING
# @name maestroIndex
POST http://maestro.local/index/repository/song.overture/study/{{study_id}}
Authorization: Bearer {{token}}

### 7. CHECK ELASTICSEARCH INDEX
# @name checkElasticsearch
GET http://elasticsearch.local/agari-index/_search
Content-Type: application/json

{
  "query": {
    "match": {
      "studyId": "{{study_id}}"
    }
  }
}

### 8. CHECK ARRANGER DATA ACCESS
# @name arrangerGraphQL
POST http://arranger.local/graphql
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "query": "query { file { hits { total } edges { node { objectId fileName fileSize studyId } } } }"
}

### === FOLIO PROJECTS SERVICE ===

### 1. Folio Health Check
GET http://folio.local/health

### 2. Get Folio JWT Token
# @name folio_login
POST http://keycloak.local/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password
&client_id=folio
&username={{username}}
&password={{password}}

### 3. List Projects
GET http://folio.local/api/projects
Authorization: Bearer {{folio_login.response.body.access_token}}

### 4. Create Project
# @name create_project
POST http://folio.local/api/projects
Authorization: Bearer {{folio_login.response.body.access_token}}
Content-Type: application/json

{
  "name": "COVID-19 Variants Study",
  "description": "Analysis of SARS-CoV-2 variants from South African samples",
  "pathogen_id": null
}

### 5. Get Project by ID
GET http://folio.local/api/projects/{{create_project.response.body.id}}
Authorization: Bearer {{folio_login.response.body.access_token}}

### 6. List Pathogens
GET http://folio.local/api/pathogens
Authorization: Bearer {{folio_login.response.body.access_token}}

### 7. Create Pathogen
# @name create_pathogen
POST http://folio.local/api/pathogens
Authorization: Bearer {{folio_login.response.body.access_token}}
Content-Type: application/json

{
  "name": "SARS-CoV-2",
  "scientific_name": "Severe acute respiratory syndrome coronavirus 2",
  "description": "Novel coronavirus causing COVID-19",
  "schema": {
    "genome_length": 29903,
    "genes": ["ORF1ab", "S", "ORF3a", "E", "M", "ORF6", "ORF7a", "ORF7b", "ORF8", "N", "ORF10"]
  }
}

### 8. Update Project with Pathogen
PUT http://folio.local/api/projects/{{create_project.response.body.id}}
Authorization: Bearer {{folio_login.response.body.access_token}}
Content-Type: application/json

{
  "name": "COVID-19 Variants Study",
  "description": "Analysis of SARS-CoV-2 variants from South African samples - Updated",
  "pathogen_id": "{{create_pathogen.response.body.id}}"
}

### 9. Folio API Documentation
GET http://folio.local/docs
