replicaCount: 1

fullnameOverride: "song"

url:
  hostname: "song.local"

image:
  repository: ghcr.io/overture-stack/song-server
  pullPolicy: IfNotPresent
  tag: "edge"

nameOverride: ""

service:
  type: ClusterIP
  port: 8080

song:
  spring:
    profiles:
      active: "prod,secure,default,s3,score-client-cred"
    flyway:
      enabled: true
    security:
      oauth2:
        resourceserver:
          jwt:
            jwkSetUri: "http://keycloak:8080/realms/agari/protocol/openid-connect/certs"
            issuerUri: "http://keycloak.local/realms/agari"
  client:
    study:
      maxUploadFileSize: 10737418240
      maxNumberOfFilesPerUpload: 20  # Database Variables
  datasource:
    url: "jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified"
    username: "admin"
    password: "song-db-pass-123"
  
  # Song Variables
  id:
    useLocal: true
  schemas:
    enforceLatest: true
  
  # Score Variables
  score:
    url: "http://score:8087"
    accessToken: ""
    # Client credentials for SONG to authenticate to Score
    clientCredentials:
      id: "dms"
      secret: "dms-secret"
      tokenUrl: "http://keycloak:8080/realms/agari/protocol/openid-connect/token"
      systemScope: "openid" # this gets the RPT
    
  
  auth:
    server:
      provider: "keycloak"
      clientId: "dms"
      clientSecret: "dms-secret" 
      tokenName: "apiKey"
      keycloak:
        host: "http://keycloak:8080"
        realm: "agari"
      scope:
        study:
          prefix: "STUDY."
          suffix: ".WRITE"
        system: "song.WRITE"
    oauth2:
      resourceserver:
        jwt:
          jwkSetUri: "http://keycloak:8080/realms/agari/protocol/openid-connect/certs"
          issuerUri: "http://keycloak.local/realms/agari"
      introspectionUri: "http://keycloak:8080/realms/agari/apikey/check_api_key/"
  
  # Kafka Variables (disabled - pointing to non-existent server)
  kafka:
    bootstrapServers: "disabled-kafka:9092"
    template:
      defaultTopic: "song-analysis"
  
  # Swagger Variable
  swagger:
    alternateUrl: "/swagger-api"

# Probe configuration
probes:
  liveness:
    enabled: false 
    httpGet:
      path: /actuator/health
      port: 8081
    initialDelaySeconds: 300  
    periodSeconds: 60         
    timeoutSeconds: 10
    failureThreshold: 5       
  
  readiness:
    enabled: true
    tcpSocket:
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
  hosts:
    - host: song.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Resource limits
resources:
  limits:
    cpu: 500m
    memory: 1.5Gi
  requests:
    cpu: 150m
    memory: 768Mi

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Pod security context
podSecurityContext: {}
securityContext: {}

# Service account
serviceAccount:
  create: false
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}
